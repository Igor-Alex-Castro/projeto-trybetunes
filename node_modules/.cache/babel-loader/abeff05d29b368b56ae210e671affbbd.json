{"ast":null,"code":"var _jsxFileName = \"/home/igor/projetos-trybe/sd-020-b-project-trybetunes/src/components/MusicCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from '../pages/loading/Loading';\nimport './musicaCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFaforite: false\n    };\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.addFavoritos = this.addFavoritos.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      favorito\n    } = this.props;\n\n    if (favorito) {\n      this.setState({\n        isFaforite: true\n      });\n    }\n\n    const script = document.createElement('script');\n    script.src = './script.js';\n    script.async = true;\n    script.document = document;\n    document.body.appendChild(script);\n  }\n\n  onChangeInput(_ref) {\n    let {\n      target\n    } = _ref;\n    const {\n      checked\n    } = target;\n    this.setState({\n      isFaforite: checked\n    }, () => this.addFavoritos());\n  }\n\n  async addFavoritos() {\n    const {\n      isFaforite\n    } = this.state;\n    const {\n      id,\n      atualizaSong,\n      isAlbum\n    } = this.props;\n\n    if (isFaforite) {\n      this.setState({\n        isLoading: true\n      });\n      await addSong(id);\n      this.setState({\n        isLoading: false\n      });\n    }\n\n    if (!isFaforite) {\n      this.setState({\n        isLoading: true\n      });\n      await removeSong(id);\n      this.setState({\n        isLoading: false\n      });\n\n      if (!isAlbum) {\n        await atualizaSong();\n      }\n    }\n  }\n\n  render() {\n    const {\n      previewUrl,\n      trackName,\n      trackId\n    } = this.props;\n    const {\n      isLoading,\n      isFaforite\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this) :\n      /*#__PURE__*/\n\n      /*\n      <div>\n        <p>{trackName}</p>\n        <audio data-testid=\"audio-component\" src={ previewUrl }  preload=\"nonde\" controls>\n          <track kind=\"captions\" />\n          O seu navegador n√£o suporta o elemento\n          <code>audio</code>\n        </audio>\n        <label htmlFor={ trackId }>\n          Favorita\n          <input\n            type=\"checkbox\"\n            id={ trackId }\n            data-testid={ `checkbox-music-${trackId}` }\n            checked={ isFaforite }\n            atualizaSong={ this.atualizaSong }\n            onChange={ this.onChangeInput }\n          />\n        </label>\n      </div> */\n      _jsxDEV(\"div\", {\n        className: \"player-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"play-pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"song-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"artist\",\n              children: trackName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timeline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n              className: \"pcast-progress\",\n              value: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"pcast-currenttime pcast-time\",\n              children: \"0:00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            id: \"main-audio\",\n            preload: \"none\",\n            width: \"100%\",\n            src: previewUrl,\n            children: /*#__PURE__*/_jsxDEV(\"source\", {\n              src: previewUrl,\n              type: \"audio/mpeg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nMusicCard.propTypes = {\n  previewUrl: PropTypes.string.isRequired,\n  trackName: PropTypes.string.isRequired,\n  trackId: PropTypes.number.isRequired,\n  favorito: PropTypes.bool.isRequired,\n  id: PropTypes.shape().isRequired,\n  atualizaSong: PropTypes.func.isRequired,\n  isAlbum: PropTypes.bool.isRequired\n};\nexport default MusicCard;","map":{"version":3,"sources":["/home/igor/projetos-trybe/sd-020-b-project-trybetunes/src/components/MusicCard.js"],"names":["React","PropTypes","addSong","removeSong","Loading","MusicCard","Component","constructor","props","state","isFaforite","onChangeInput","bind","addFavoritos","componentDidMount","favorito","setState","script","document","createElement","src","async","body","appendChild","target","checked","id","atualizaSong","isAlbum","isLoading","render","previewUrl","trackName","trackId","propTypes","string","isRequired","number","bool","shape","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from '../pages/loading/Loading';\nimport './musicaCard.css';\n\nclass MusicCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFaforite: false,\n    };\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.addFavoritos = this.addFavoritos.bind(this);\n  }\n\n  componentDidMount() {\n    const { favorito } = this.props;\n    if (favorito) {\n      this.setState({\n        isFaforite: true,\n      });\n    }\n    const script = document.createElement('script');\n    script.src = './script.js';\n    script.async = true;\n    script.document = document;\n    document.body.appendChild(script);\n  }\n\n  onChangeInput({ target }) {\n    const { checked } = target;\n    this.setState({\n      isFaforite: checked,\n    }, () => this.addFavoritos());\n  }\n\n  async addFavoritos() {\n    const { isFaforite } = this.state;\n    const { id, atualizaSong, isAlbum } = this.props;\n\n    if (isFaforite) {\n      this.setState({ isLoading: true });\n      await addSong(id);\n      this.setState({ isLoading: false });\n    }\n    if (!isFaforite) {\n      this.setState({ isLoading: true });\n      await removeSong(id);\n      this.setState({ isLoading: false });\n      if (!isAlbum) {\n        await atualizaSong();\n      }\n    }\n  }\n\n  render() {\n    const { previewUrl, trackName, trackId } = this.props;\n    const { isLoading, isFaforite } = this.state;\n    return (\n      <div>\n        { isLoading\n          ? (<Loading />)\n          : (\n            /*\n            <div>\n              <p>{trackName}</p>\n              <audio data-testid=\"audio-component\" src={ previewUrl }  preload=\"nonde\" controls>\n                <track kind=\"captions\" />\n                O seu navegador n√£o suporta o elemento\n                <code>audio</code>\n              </audio>\n              <label htmlFor={ trackId }>\n                Favorita\n                <input\n                  type=\"checkbox\"\n                  id={ trackId }\n                  data-testid={ `checkbox-music-${trackId}` }\n                  checked={ isFaforite }\n                  atualizaSong={ this.atualizaSong }\n                  onChange={ this.onChangeInput }\n                />\n              </label>\n            </div> */\n            <div className=\"player-container\">\n              <div className=\"player-wrap\">\n                <div className=\"play-pause\" />\n                <section className=\"song-meta\">\n                  <div className=\"artist\">{trackName}</div>\n                  <div className=\"timeline\" />\n                  <progress className=\"pcast-progress\" value=\"0\" />\n                  <span className=\"pcast-currenttime pcast-time\">0:00</span>\n                </section>\n                <audio\n                  id=\"main-audio\"\n                  preload=\"none\"\n                  width=\"100%\"\n                  src={ previewUrl }\n                >\n                  <source src={ previewUrl } type=\"audio/mpeg\" />\n                </audio>\n              </div>\n            </div>\n\n          )}\n      </div>\n    );\n  }\n}\nMusicCard.propTypes = {\n  previewUrl: PropTypes.string.isRequired,\n  trackName: PropTypes.string.isRequired,\n  trackId: PropTypes.number.isRequired,\n  favorito: PropTypes.bool.isRequired,\n  id: PropTypes.shape().isRequired,\n  atualizaSong: PropTypes.func.isRequired,\n  isAlbum: PropTypes.bool.isRequired,\n};\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}